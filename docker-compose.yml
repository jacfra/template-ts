name: template-ts
version: "3.8"

services:
  db:
    container_name: db
    image: postgres:alpine
    volumes:
      - db_vol:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - PGPORT=${DB_PORT}
    ports:
      - "${DB_PORT}:${DB_PORT}" # host:container
    restart: on-failure
  server:
    container_name: server
    build:
      dockerfile: ./Dockerfile
      context: ./server
    command:
      [
        "/wait-for-it.sh",
        "db:${DB_PORT}",
        "--",
        "yarn",
        "prod"
      ]
    environment:
      - DB_HOST=${DB_HOST}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_PORT=${DB_PORT}
      - SERVER_PORT=${SERVER_PORT}
      - BLOCK_FROST_API_KEY=${BLOCK_FROST_API_KEY}
    depends_on:
      - db
    ports:
      - "${SERVER_PORT}:${SERVER_PORT}" # host:container
  client:
    container_name: client
    build:
      dockerfile: ./Dockerfile
      context: ./client
    ports:
      - "${CLIENT_PORT}:${CLIENT_PORT}" # host:container
    depends_on:
      - server
  nginx-ssl:
    image: valian/docker-nginx-auto-ssl
    restart: on-failure
    ports:
      - 80:80
      - 443:443
    volumes:
      - ssl_vol:/etc/resty-auto-ssl
    environment:
      ALLOWED_DOMAINS: '([a-z]+.)?${DOMAIN}'
      SITES: '${DOMAIN}=client:${CLIENT_PORT};api.${DOMAIN}=server:${SERVER_PORT}'
    depends_on:
      - client
      - server

volumes:
  db_vol:
  ssl_vol:
